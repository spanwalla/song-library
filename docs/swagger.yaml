basePath: /api/v1
definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  github_com_spanwalla_song-library_internal_entity.Song:
    properties:
      group:
        example: Nirvana
        type: string
      id:
        example: 1
        type: integer
      link:
        example: https://www.youtube.com/watch?v=JirXTmnItd4
        type: string
      releaseDate:
        example: "2002-10-29T00:00:00Z"
        type: string
      song:
        example: Smells Like Teen Spirit
        type: string
    type: object
  internal_controller_http_v1.insertSongInput:
    properties:
      group:
        example: The Cure
        maxLength: 128
        type: string
      song:
        example: Love Song
        maxLength: 128
        type: string
    required:
    - group
    - song
    type: object
  internal_controller_http_v1.songRoutes:
    type: object
  internal_controller_http_v1.updateSongInput:
    properties:
      group:
        example: Hannah
        maxLength: 128
        type: string
      id:
        type: integer
      link:
        example: https://www.youtube.com/watch?v=Xsp3_a-PMTw
        maxLength: 128
        type: string
      releaseDate:
        example: "2006-06-22"
        type: string
      song:
        example: Best Compilation
        maxLength: 128
        type: string
    required:
    - group
    - link
    - releaseDate
    - song
    type: object
  internal_controller_http_v1.updateSongTextInput:
    properties:
      id:
        type: integer
      text:
        example: |-
          I can do
          it easily

          New couplet.

          Another one.
        type: string
    required:
    - text
    type: object
host: localhost:8080
info:
  contact: {}
  title: Song Library
  version: "1.0"
paths:
  /songs:
    get:
      description: Search songs with filters
      parameters:
      - description: Filters, can be multiple
        example: Muse
        in: query
        name: filter[<name>]
        type: string
      - description: List of sort criteria. Direction will set to asc if it is not
          stated
        example: song:asc,group:desc,release_date
        in: query
        name: order_by
        type: string
      - default: 0
        description: Offset
        example: 10
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 5
        description: Limit
        example: 10
        in: query
        maximum: 10
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_spanwalla_song-library_internal_entity.Song'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Search songs
    post:
      consumes:
      - application/json
      description: Add new song
      parameters:
      - description: Short song info
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/internal_controller_http_v1.insertSongInput'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Add new song
  /songs/{id}:
    delete:
      description: Delete song by id
      parameters:
      - description: Song ID
        example: 2
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Delete song
    get:
      description: Get song by id
      parameters:
      - description: Song ID
        example: 2
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_spanwalla_song-library_internal_entity.Song'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get song by id
    put:
      consumes:
      - application/json
      description: Edit song by id
      parameters:
      - description: Song ID
        example: 2
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - description: JSON-body
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/internal_controller_http_v1.updateSongInput'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Edit song
  /songs/{id}/text:
    get:
      description: Get song text with pagination by couplets
      parameters:
      - description: Song ID
        example: 2
        in: path
        minimum: 1
        name: id
        required: true
        type: integer
      - default: 0
        description: Offset
        example: 10
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 5
        description: Limit
        example: 10
        in: query
        maximum: 10
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_controller_http_v1.songRoutes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get song text
    put:
      consumes:
      - application/json
      description: Edit song text by id
      parameters:
      - description: Song ID
        example: 2
        in: path
        name: id
        required: true
        type: integer
      - description: New song text. Each couplet is separated by double newline symbols.
        in: body
        name: text
        required: true
        schema:
          $ref: '#/definitions/internal_controller_http_v1.updateSongTextInput'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Edit song text
swagger: "2.0"
