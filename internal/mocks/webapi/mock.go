// Code generated by MockGen. DO NOT EDIT.
// Source: webapi.go
//
// Generated by this command:
//
//	mockgen -source=webapi.go -destination=../mocks/webapi/mock.go -package=webapimocks
//

// Package webapimocks is a generated GoMock package.
package webapimocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSongInfo is a mock of SongInfo interface.
type MockSongInfo struct {
	ctrl     *gomock.Controller
	recorder *MockSongInfoMockRecorder
	isgomock struct{}
}

// MockSongInfoMockRecorder is the mock recorder for MockSongInfo.
type MockSongInfoMockRecorder struct {
	mock *MockSongInfo
}

// NewMockSongInfo creates a new mock instance.
func NewMockSongInfo(ctrl *gomock.Controller) *MockSongInfo {
	mock := &MockSongInfo{ctrl: ctrl}
	mock.recorder = &MockSongInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSongInfo) EXPECT() *MockSongInfoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSongInfo) Get(ctx context.Context, group, song string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, group, song)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSongInfoMockRecorder) Get(ctx, group, song any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSongInfo)(nil).Get), ctx, group, song)
}
